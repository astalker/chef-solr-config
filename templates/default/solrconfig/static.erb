<!-- <lib/> directives can be used to instruct Solr to load any Jars
       identified and use them to resolve any "plugins" specified in
       your solrconfig.xml or schema.xml (ie: Analyzers, Request
       Handlers, etc...).

       All directories and paths are resolved relative to the
       instanceDir.

       Please note that <lib/> directives are processed in the order
       that they appear in your solrconfig.xml file, and are "stacked" 
       on top of each other when building a ClassLoader - so if you have 
       plugin jars with dependencies on other jars, the "lower level" 
       dependency jars should be loaded first.

       If a "./lib" directory exists in your instanceDir, all files
       found in it are included as if you had used the following
       syntax...
-->

<!-- A 'dir' option by itself adds any files found in the directory 
   to the classpath, this is useful for including all jars in a
   directory.

   When a 'regex' is specified in addition to a 'dir', only the
   files in that directory which completely match the regex
   (anchored on both ends) will be included.

   If a 'dir' option (with or without a regex) is used and nothing
   is found that matches, a warning will be logged.

   The examples below can be used to load some solr-contribs along 
   with their external dependencies.
-->

<!-- an exact 'path' can be used instead of a 'dir' to specify a 
       specific jar file.  This will cause a serious error to be logged 
       if it can't be loaded.
-->
<!--
 <lib path="../a-jar-that-does-not-exist.jar" /> 
-->

<lib dir="${solr.install.dir:../../../..}/contrib/extraction/lib" regex=".*\.jar" />
<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-cell-\d.*\.jar" />

<lib dir="${solr.install.dir:../../../..}/contrib/clustering/lib/" regex=".*\.jar" />
<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-clustering-\d.*\.jar" />

<lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar" />
<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar" />

<lib dir="${solr.install.dir:../../../..}/contrib/velocity/lib" regex=".*\.jar" />
<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-velocity-\d.*\.jar" />

<!-- The DirectoryFactory to use for indexes.
       
   solr.StandardDirectoryFactory is filesystem
   based and tries to pick the best implementation for the current
   JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
   wraps solr.StandardDirectoryFactory and caches small files in memory
   for better NRT performance.

   One can force a particular implementation via solr.MMapDirectoryFactory,
   solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

   solr.RAMDirectoryFactory is memory based, not
   persistent, and doesn't work with replication.
-->
<directoryFactory name="DirectoryFactory" 
                class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

<!-- The CodecFactory for defining the format of the inverted index.
   The default implementation is SchemaCodecFactory, which is the official Lucene
   index format, but hooks into the schema to provide per-field customization of
   the postings lists and per-document values in the fieldType element
   (postingsFormat/docValuesFormat). Note that most of the alternative implementations
   are experimental, so if you choose to customize the index format, it's a good
   idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
   before upgrading to a newer version to avoid unnecessary reindexing.
-->
<codecFactory class="solr.SchemaCodecFactory"/>
